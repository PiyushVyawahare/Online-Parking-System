{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\piyus\\\\Desktop\\\\Online+Parking+System\\\\client\\\\src\\\\pages\\\\map\\\\map.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { useEffect } from 'react';\nimport api from '../../api';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomMarker = _ref => {\n  let {\n    text,\n    onClick\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'white',\n      background: 'grey',\n      padding: '15px 10px',\n      display: 'inline-flex',\n      textAlign: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: '100%',\n      transform: 'translate(-50%, -50%)'\n    },\n    onClick: onClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n};\n_c = CustomMarker;\nconst EARTH_RADIUS_IN_METERS = 6371 * 1000;\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n  const deltaLat = (lat2 - lat1) * (Math.PI / 180);\n  const deltaLon = (lon2 - lon1) * (Math.PI / 180);\n  const lat1InRadians = lat1 * (Math.PI / 180);\n  const lat2InRadians = lat2 * (Math.PI / 180);\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1InRadians) * Math.cos(lat2InRadians) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return EARTH_RADIUS_IN_METERS * c;\n}\nconst Map = () => {\n  _s();\n  const [parkings, setParkings] = useState(null);\n  const [lati, setlati] = useState(0);\n  const [longi, setlongi] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const navigate = useNavigate();\n  function onLoad() {\n    api.get(\"/getParkings\", {\n      withCredentials: true\n    }).then(res => {\n      setParkings(res.data);\n      console.log(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  useEffect(() => {\n    onLoad();\n    getPosition();\n  }, []);\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false);\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\n  const onChanged = _ref2 => {\n    let {\n      center\n    } = _ref2;\n    console.log(center.lat); // prints the latitude of the current center of the map\n    console.log(center.lng); // prints the longitude of the current center of the map\n  };\n\n  const openPopup = location => {\n    setSelectedLocation(location);\n    setIsPopupOpen(true);\n    console.log(lati, longi, selectedLocation === null || selectedLocation === void 0 ? void 0 : selectedLocation.plat, selectedLocation === null || selectedLocation === void 0 ? void 0 : selectedLocation.plng);\n    setDistance(haversineDistance(lati, longi, selectedLocation === null || selectedLocation === void 0 ? void 0 : selectedLocation.plat, selectedLocation === null || selectedLocation === void 0 ? void 0 : selectedLocation.plng));\n  };\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n  const onSelected = () => {\n    closePopup();\n    navigate(\"/parking\", {\n      state: {\n        parkingId: selectedLocation._id\n      }\n    });\n  };\n  function getPosition() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position.coords.latitude);\n        console.log(position.coords.longitude);\n        setlati(position.coords.latitude);\n        setlongi(position.coords.longitude);\n        console.log(lati);\n        console.log(longi);\n      }, error => {\n        console.log(error);\n      });\n    } else alert(\"Not Supported\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: lati && longi ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: 'AIzaSyDRA8KWu6hfAC7vyYG8h4FQ48UzNymOjUc'\n        },\n        defaultCenter: {\n          lat: lati,\n          lng: longi\n        },\n        defaultZoom: 13,\n        onChange: onChanged,\n        children: parkings === null || parkings === void 0 ? void 0 : parkings.map(location => /*#__PURE__*/_jsxDEV(CustomMarker, {\n          lat: location.plat,\n          lng: location.plng,\n          text: location.pname,\n          onClick: () => openPopup(location)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), isPopupOpen && selectedLocation && distance && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          background: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected location: \", selectedLocation.pname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedLocation._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: distance < 500 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Heelloo\"\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closePopup,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onSelected,\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Loading\"\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"vpquvVVIUgZfAFWEApGn3qMBfa4=\", false, function () {\n  return [useNavigate];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomMarker\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","GoogleMapReact","useEffect","api","useState","useNavigate","CustomMarker","text","onClick","color","background","padding","display","textAlign","alignItems","justifyContent","borderRadius","transform","EARTH_RADIUS_IN_METERS","haversineDistance","lat1","lon1","lat2","lon2","deltaLat","Math","PI","deltaLon","lat1InRadians","lat2InRadians","a","sin","cos","c","atan2","sqrt","Map","parkings","setParkings","lati","setlati","longi","setlongi","distance","setDistance","navigate","onLoad","get","withCredentials","then","res","data","console","log","catch","err","getPosition","isPopupOpen","setIsPopupOpen","selectedLocation","setSelectedLocation","onChanged","center","lat","lng","openPopup","location","plat","plng","closePopup","onSelected","state","parkingId","_id","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","alert","height","width","key","map","pname","top","left"],"sources":["C:/Users/piyus/Desktop/Online+Parking+System/client/src/pages/map/map.js"],"sourcesContent":["import React from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { useEffect } from 'react';\r\nimport api from '../../api';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CustomMarker = ({ text, onClick }) => (\r\n  <div style={{\r\n    color: 'white',\r\n    background: 'grey',\r\n    padding: '15px 10px',\r\n    display: 'inline-flex',\r\n    textAlign: 'center',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderRadius: '100%',\r\n    transform: 'translate(-50%, -50%)'\r\n  }} onClick={onClick}>\r\n    {text}\r\n  </div>\r\n);\r\n\r\n\r\nconst EARTH_RADIUS_IN_METERS = 6371 * 1000;\r\n\r\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\r\n  const deltaLat = (lat2 - lat1) * (Math.PI / 180);\r\n  const deltaLon = (lon2 - lon1) * (Math.PI / 180);\r\n  const lat1InRadians = lat1 * (Math.PI / 180);\r\n  const lat2InRadians = lat2 * (Math.PI / 180);\r\n\r\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n            Math.cos(lat1InRadians) * Math.cos(lat2InRadians) *\r\n            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  return EARTH_RADIUS_IN_METERS * c;\r\n}\r\n\r\n\r\nconst Map = () => {\r\n  const [parkings, setParkings] = useState(null);\r\n  const [lati, setlati] = useState(0);\r\n  const [longi, setlongi] = useState(0);\r\n  const [distance, setDistance] = useState(0);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  function onLoad(){\r\n    api.get(\"/getParkings\", {withCredentials: true})\r\n    .then(res=>{\r\n      setParkings(res.data);\r\n      console.log(res.data);\r\n    })\r\n    .catch(err=>{\r\n      console.log(err);\r\n    })\r\n  }\r\n  \r\n  useEffect(() => {\r\n    onLoad();\r\n    getPosition();\r\n  }, [])\r\n\r\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false);\r\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\r\n  const onChanged = ({ center }) => {\r\n    console.log(center.lat) // prints the latitude of the current center of the map\r\n    console.log(center.lng) // prints the longitude of the current center of the map\r\n  }\r\n\r\n  const openPopup = location => {\r\n    setSelectedLocation(location);\r\n    setIsPopupOpen(true);\r\n    console.log(lati, longi, selectedLocation?.plat, selectedLocation?.plng)\r\n    setDistance(haversineDistance(lati, longi, selectedLocation?.plat, selectedLocation?.plng));\r\n  };\r\n\r\n  const closePopup = () => {\r\n    setIsPopupOpen(false);\r\n  };\r\n  const onSelected = () => {\r\n    closePopup()\r\n    navigate(\"/parking\", {state: { parkingId: selectedLocation._id}})\r\n  }\r\n\r\n\r\n  function getPosition() {\r\n    if(navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          console.log(position.coords.latitude)\r\n          console.log(position.coords.longitude)\r\n          setlati(position.coords.latitude)\r\n          setlongi(position.coords.longitude)\r\n          \r\n          console.log(lati)\r\n          console.log(longi)\r\n        },\r\n        (error) => {\r\n          console.log(error)\r\n        },\r\n      );\r\n    } \r\n    else\r\n      alert(\"Not Supported\");\r\n  }\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <div style={{ height: '100vh', width: '100%' }}>\r\n      {(lati && longi)?\r\n      <>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: 'AIzaSyDRA8KWu6hfAC7vyYG8h4FQ48UzNymOjUc' }}\r\n        defaultCenter={{ lat: lati, lng:  longi }}\r\n        defaultZoom={13}\r\n        onChange={onChanged}\r\n      >\r\n        {/* {console.log(map.getCenter().lat())} */}\r\n        {parkings?.map(location => (\r\n          <CustomMarker lat={location.plat} lng={location.plng} text={location.pname} onClick={() => openPopup(location)} />\r\n        ))}\r\n      </GoogleMapReact>\r\n      {isPopupOpen && selectedLocation && distance && (\r\n        <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white' }}>\r\n          <p>Selected location: {selectedLocation.pname}</p>\r\n          <p>{selectedLocation._id}</p>\r\n          <p>{(distance<500)?<>Heelloo</>:<></>}</p>\r\n          <button onClick={closePopup}>Close</button>\r\n          <button onClick={onSelected}>Select</button>\r\n        </div>\r\n      )}\r\n      </>:<>Loading</>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}